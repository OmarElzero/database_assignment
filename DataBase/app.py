import sqlite3

# Connect to SQLite database (or create it if it doesn't exist)
conn = sqlite3.connect('test.db')
cursor = conn.cursor()

# Drop tables if they exist (simplified for SQLite)
cursor.executescript('''
DROP TABLE IF EXISTS AVAILABLE_IN;
DROP TABLE IF EXISTS AVAILABLE_SLOT;
DROP TABLE IF EXISTS CLIENT;
DROP TABLE IF EXISTS HAS;
DROP TABLE IF EXISTS LOCATION;
DROP TABLE IF EXISTS LOCATION_NAME;
DROP TABLE IF EXISTS REQUEST;
DROP TABLE IF EXISTS SEARCH_FOR;
DROP TABLE IF EXISTS SPECIALITIES;
DROP TABLE IF EXISTS SUB_TASK;
DROP TABLE IF EXISTS TASK;
DROP TABLE IF EXISTS WORKER;
DROP TABLE IF EXISTS WORK_IN;
''')

# Create tables (simplified for SQLite, adjust types as needed)
cursor.executescript('''
CREATE TABLE AVAILABLE_SLOT (
   SLOT_ID INTEGER PRIMARY KEY,
   START_TIME TEXT,
   END_TIME TEXT
);

CREATE TABLE WORKER (
   WORKER_ID INTEGER PRIMARY KEY,
   NAME TEXT NOT NULL
);

CREATE TABLE CLIENT (
   CLIENT_ID INTEGER PRIMARY KEY,
   NAME TEXT NOT NULL,
   PHONE TEXT NOT NULL,
   ADDRESS TEXT NOT NULL,
   PAYMENT_INFO TEXT
);

CREATE TABLE SPECIALITIES (
   SPECIALITY_ID INTEGER PRIMARY KEY,
   TASK_ID INTEGER,
   SPECIALITY_NAME TEXT NOT NULL
);

CREATE TABLE LOCATION_NAME (
   LOC_ID INTEGER PRIMARY KEY,
   LOCATION_ID INTEGER,
   LOCATION_NAME TEXT NOT NULL
);

CREATE TABLE LOCATION (
   LOCATION_ID INTEGER PRIMARY KEY,
   LOC_ID INTEGER
);

CREATE TABLE TASK (
   TASK_ID INTEGER PRIMARY KEY,
   TASK_NAME TEXT NOT NULL,
   REQUEST_ID INTEGER,
   AVG_FEE REAL NOT NULL,
   AVG_TIME_FINISH TEXT
);

CREATE TABLE SUB_TASK (
   TASK_ID INTEGER,
   NAME TEXT NOT NULL,
   STATUS TEXT NOT NULL,
   PRIMARY KEY (TASK_ID, NAME)
);

CREATE TABLE REQUEST (
   REQUEST_ID INTEGER PRIMARY KEY,
   TASK_ID INTEGER,
   CLIENT_ID INTEGER,
   REQUEST_ADDRESS TEXT NOT NULL
);

CREATE TABLE HAS (
   WORKER_ID INTEGER,
   SPECIALITY_ID INTEGER,
   PRIMARY KEY (WORKER_ID, SPECIALITY_ID)
);

CREATE TABLE AVAILABLE_IN (
   WORKER_ID INTEGER,
   SLOT_ID INTEGER,
   PRIMARY KEY (WORKER_ID, SLOT_ID)
);

CREATE TABLE WORK_IN (
   WORKER_ID INTEGER,
   LOCATION_ID INTEGER,
   PRIMARY KEY (WORKER_ID, LOCATION_ID)
);

CREATE TABLE SEARCH_FOR (
   REQUEST_ID INTEGER,
   WORKER_ID INTEGER,
   PRIMARY KEY (REQUEST_ID, WORKER_ID)
);
''')

# Example: Insert a client
cursor.execute("INSERT INTO CLIENT (NAME, PHONE, ADDRESS, PAYMENT_INFO) VALUES (?, ?, ?, ?)",
               ("John Doe", "123456789", "123 Main St", "VISA"))
conn.commit()

# Example: List clients
def list_clients():
    cursor.execute("SELECT * FROM CLIENT")
    for row in cursor.fetchall():
        print(row)

list_clients()

# Close connection
conn.close()
